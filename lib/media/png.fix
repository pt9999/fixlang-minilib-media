//  PNG image I/O.
//
//  How to use:
//  1. Install PNG library. For example, run the command below.
//     `$ sudo apt install libpng-dev`
//  2. Add `-d png` option to `fix run` and `fix build` arguments.
//
// NOTE: Currently only writing is supported. Reading is not supported yet.
module Minilib.Media.Png;

import Minilib.Media.Image;

write_png_file: String -> Image -> IOFail ();
write_png_file = |filepath, image| (
    let imgio = *image._to_png_imageio;
    let row_stride = image.@width * image.@channels;
    imgio.write_to_file(filepath, false, image.@data, row_stride)
);

write_png_to_memory: Image -> IOFail (Array U8);
write_png_to_memory = |image| (
    let imgio = *image._to_png_imageio;
    let row_stride = image.@width * image.@channels;
    imgio.write_to_memory(false, image.@data, row_stride)
);

_to_png_imageio: Image -> IOFail PngImageIO;
_to_png_imageio = |image| (
    let imgio = *PngImageIO::make;
    imgio.set_image_size(image.@width, image.@height);;
    imgio.set_format(*PngImageIO::parse_format(image.@format).from_result);;
    pure $ imgio
);


type PngImageIO = unbox struct {
    dtor: Destructor Ptr
};

namespace PngImageIO {

    make: IOFail PngImageIO;
    make = (
        let pv_image: Ptr = *FFI_CALL_IO[Ptr minilib_png_create()].lift;
        let dtor: Destructor Ptr = Destructor::make(pv_image, |pv_image|
            FFI_CALL_IO[() minilib_png_destroy(Ptr), pv_image];;
            pure $ nullptr
        );
        pure $ PngImageIO { dtor: dtor }
    );

    get_warning_or_error: PngImageIO -> IOFail I64;
    get_warning_or_error = |img| (
        img.@dtor.borrow_io(|pv_image|
            FFI_CALL_IO[U32 minilib_png_get_warning_or_error(Ptr), pv_image]
            .map(to_I64)
        ).lift
    );

    get_message: PngImageIO -> IOFail String;
    get_message = |img| (
        img.@dtor.borrow_io(|pv_image|
            FFI_CALL_IO[Ptr minilib_png_get_message(Ptr), pv_image]
            .map(_unsafe_from_c_str_ptr)
        ).lift
    );

    set_image_size: I64 -> I64 -> PngImageIO -> IOFail ();
    set_image_size = |width, height, img| (
        if width <= 0 || height <= 0 {
            throw $ "Invalid size"
        };
        img.@dtor.borrow_io(|pv_image|
            FFI_CALL_IO[() minilib_png_set_size(Ptr, U32, U32), pv_image, width.to_U32, height.to_U32]
        ).lift
    );

    set_format: I64 -> PngImageIO -> IOFail ();
    set_format = |format, img| (
        img.@dtor.borrow_io(|pv_image|
            FFI_CALL_IO[() minilib_png_set_format(Ptr, U32), pv_image, format.to_U32]
        ).lift
    );

    write_to_file: String -> Bool -> Array U8 -> I64 -> PngImageIO -> IOFail ();
    write_to_file = |filepath, convert_to_8bit, buffer, row_stride, png_imageio| (
        let convert_to_8bit = if convert_to_8bit { 1_I32 } else { 0_I32 };
        let colormap = nullptr;
        let res =
            *png_imageio.@dtor.borrow_io(|pv_image|
              filepath.borrow_c_str_io(|p_filepath|
                buffer.borrow_boxed_io(|p_buffer|
                    FFI_CALL_IO[CInt minilib_png_write_to_file(Ptr, Ptr, I32, Ptr, I32, Ptr),
                        pv_image, p_filepath, convert_to_8bit,
                        p_buffer, row_stride.to_I32, colormap]
                )
              )
            ).lift;
        png_imageio._check_warning_or_error("write_to_file", res)
    );

    _check_warning_or_error: String -> CInt -> PngImageIO -> IOFail ();
    _check_warning_or_error = |func_name, res, png_imageio| (
        let result = "PngImageIO::" + func_name + ": res=" + res.to_string;
        let warning_or_error = *png_imageio.get_warning_or_error;
        let message = *png_imageio.get_message;
        if warning_or_error == 2 {  // error
            throw $ result + " ERROR: " + message
        };
        if warning_or_error == 1 {  // warning
            eprintln(result + " WARNING: " + message).lift
        } else if res.to_I64 == 1 {
            // png_image_write_to_file() returns 1 on success
            pure()
        } else {
            // something is wrong, but no message
            throw $ result
        }
    );

    write_to_memory:  Bool -> Array U8 -> I64 -> PngImageIO -> IOFail (Array U8);
    write_to_memory = |convert_to_8bit, buffer, row_stride, png_imageio| (
        let output = Array::fill(buffer.get_size * 2, 0_U8); // TODO: is it ok?
        let output_size = Array::fill(1, output.get_size.to_U32);
        let convert_to_8bit = if convert_to_8bit { 1_I32 } else { 0_I32 };
        let colormap = nullptr;
        let res =
            *png_imageio.@dtor.borrow_io(|pv_image|
              output.borrow_boxed_io(|p_output|
                output_size.borrow_boxed_io(|p_output_size|
                  buffer.borrow_boxed_io(|p_buffer|
                    FFI_CALL_IO[CInt minilib_png_write_to_memory(Ptr, Ptr, Ptr, I32, Ptr, I32, Ptr),
                        pv_image, p_output, p_output_size, convert_to_8bit,
                        p_buffer, row_stride.to_I32, colormap]
                  )
                )
              )
            ).lift;
        png_imageio._check_warning_or_error("write_to_memory", res);;
        pure $ output.get_sub(0, output_size.@(0).to_I64)
    );

    _PNG_FORMAT_FLAG_ALPHA: I64;
    _PNG_FORMAT_FLAG_ALPHA = 1; /* format with an alpha channel */
    _PNG_FORMAT_FLAG_COLOR: I64;
    _PNG_FORMAT_FLAG_COLOR = 2; /* color format: otherwise grayscale */
    _PNG_FORMAT_FLAG_LINEAR: I64;
    _PNG_FORMAT_FLAG_LINEAR = 4; /* 2-byte channels else 1-byte */
    _PNG_FORMAT_FLAG_COLORMAP: I64;
    _PNG_FORMAT_FLAG_COLORMAP = 8; /* image data is color-mapped */
    _PNG_FORMAT_FLAG_BGR: I64;
    _PNG_FORMAT_FLAG_BGR = 16; /* BGR colors, else order is RGB */
    _PNG_FORMAT_FLAG_AFIRST: I64;
    _PNG_FORMAT_FLAG_AFIRST = 32; /* alpha channel comes first */
    _PNG_FORMAT_FLAG_ASSOCIATED_ALPHA: I64;
    _PNG_FORMAT_FLAG_ASSOCIATED_ALPHA = 64; /* alpha channel is associated */

    parse_format: String -> Result ErrMsg I64;
    parse_format = |str| (
        if str == "GRAY" { ok $ 0 };
        if str == "GA" { ok $ _PNG_FORMAT_FLAG_ALPHA };
        if str == "AG" { ok $ _PNG_FORMAT_FLAG_ALPHA.bit_or $ _PNG_FORMAT_FLAG_AFIRST };
        if str == "RGB" { ok $ _PNG_FORMAT_FLAG_COLOR };
        if str == "BGR" { ok $ _PNG_FORMAT_FLAG_COLOR.bit_or $ _PNG_FORMAT_FLAG_BGR };
        if str == "RGBA" { ok $ _PNG_FORMAT_FLAG_COLOR.bit_or $ _PNG_FORMAT_FLAG_ALPHA };
        if str == "ARGB" { ok $ _PNG_FORMAT_FLAG_COLOR.bit_or $ _PNG_FORMAT_FLAG_ALPHA.bit_or $ _PNG_FORMAT_FLAG_AFIRST };
        if str == "BGRA" { ok $ _PNG_FORMAT_FLAG_COLOR.bit_or $ _PNG_FORMAT_FLAG_BGR.bit_or $ _PNG_FORMAT_FLAG_ALPHA };
        if str == "ABGR" { ok $ _PNG_FORMAT_FLAG_COLOR.bit_or $ _PNG_FORMAT_FLAG_BGR.bit_or $ _PNG_FORMAT_FLAG_ALPHA.bit_or $ _PNG_FORMAT_FLAG_AFIRST };
        err $ "Invalid format: " + str
    );
}

