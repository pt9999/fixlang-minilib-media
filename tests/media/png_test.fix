module PngTest;

import Math;

import Minilib.Media.Image;
import Minilib.Media.Png;
import Minilib.IO.FileSystem;
import Minilib.Testing.UnitTest;
import Minilib.Text.StringEx;

render: F64 -> F64 -> (F64, F64, F64);
render = |x, y| (
    let frac = |f| f - Math::floor(f);
    let noise = 0;
    let (x, y) = if noise == 0 {
        (x, y)
    } else if noise == 1 {   // add jitter noise
        let bx = frac(x*34567.0);
        let by = frac(y*12345.0);
        (x + by * 0.06, y + bx * 0.06)
    } else {            // add jitter noise
        let bx = (x * 0x123456789ABCDE_U64.to_F64).to_U64;
        let by = (y * 0xABC123ABC123FF_U64.to_F64).to_U64;
        let b = bx.bit_xor(by);
        let bx = b.shift_right(16_U64).bit_and(0xFFFF_U64).to_F64 / 65535.0;
        let by = b.shift_right(0_U64).bit_and(0xFFFF_U64).to_F64 / 65535.0;
        (x + bx * 0.02, y + by * 0.02)
    };
    let angle = Math::atan2(y, x) / (2.0 * Math::pi64);
    let radius = Math::sqrt(x * x + y * y);
    let c1 = frac(5.0 * (angle + 0.3 / (radius + 0.1)));
    let c2 = frac(4.0 * (angle - 0.4 / (radius + 0.05)));
    (0.9 * c1 + 0.5 * c2,
     0.5 * c1 + 0.7 * c2,
     0.3 * c1 + 1.2 * c2)
);

make_test_image: () -> Image;
make_test_image = |_| (
    let width = 512;
    let height = 512;
    let to_byte = |f| max(0.0, min(255.0, f * 255.0)).to_U8;
    let image = Image::make(width, height, "RGB");
    let image = Iterator::range(0, height).fold(
        image, |image, y|
        let fy = (y.to_F64 / height.to_F64) * 2.0 - 1.0;
        Iterator::range(0, width).fold (
            image, |image, x|
            let fx = (x.to_F64 / width.to_F64) * 2.0 - 1.0;
            let rgb = render(fx, fy);
            let index = image.calc_index(x, y, 0);
            image.set_rgb(index, (rgb.@0.to_byte, rgb.@1.to_byte, rgb.@2.to_byte))
        )
    );
    image
);

test_write_png_file: TestCase;
test_write_png_file = (
    make_test("test_write_png_file") $ |_|
    let image = make_test_image();
    make_dirs(".tmp", none());;
    let filepath = ".tmp/test_write_png_file.png";
    image.write_png_file(filepath);;
    assert_equal("file_exists", true, *file_exists(filepath).lift);;
    pure()
);

test_write_png_file_invalid_filepath: TestCase;
test_write_png_file_invalid_filepath = (
    make_test("test_write_png_file_invalid_filepath") $ |_|
    let image = make_test_image();
    make_dirs(".tmp", none());;
    let filepath = ".tmp/no-such-dir/test_write_png_file_invalid_filepath.png";
    let res = *image.write_png_file(filepath).to_result.lift;
    assert_equal("res", err("PngImageIO::write_to_file: res=0 ERROR: No such file or directory"), res);;
    pure()
);

test_write_png_file_invalid_size: TestCase;
test_write_png_file_invalid_size = (
    make_test("test_write_png_file_invalid_size") $ |_|
    let image = Image::make(0, 0, "RGB");
    make_dirs(".tmp", none());;
    let filepath = ".tmp/test_write_png_file_invalid_size.png";
    let res = *image.write_png_file(filepath).to_result.lift;
    assert_equal("res", err("Invalid size"), res);;
    pure()
);

test_write_png_file_invalid_format: TestCase;
test_write_png_file_invalid_format = (
    make_test("test_write_png_file_invalid_format") $ |_|
    let image = Image::make(100, 100, "RGB");
    make_dirs(".tmp", none());;
    let filepath = ".tmp/test_write_png_file_invalid_format.png";
    let image = image.set_format("INVALID");
    let res = *image.write_png_file(filepath).to_result.lift;
    assert_equal("res", err("Invalid format: INVALID"), res);;
    pure()
);

test_write_png_to_memory: TestCase;
test_write_png_to_memory = (
    make_test("test_write_png_to_memory") $ |_|
    let image = make_test_image();
    let data = *image.write_png_to_memory;
    assert_equal("magic_number", "PNG", data.get_sub(1, 4)._unsafe_to_string);;
    pure()
);

main: IO ();
main = (
    [
        test_write_png_file,
        test_write_png_file_invalid_filepath,
        test_write_png_file_invalid_size,
        test_write_png_file_invalid_format,
        test_write_png_to_memory,
        TestCase::empty
    ].run_test_driver
);

